#!/usr/bin/env bash

#------------------------------------
#    Variables with default value
#------------------------------------
CLUSTER_NAME=devship
CLUSTER_DOMAIN=devship.localhost
CLUSTER_API_PORT=6443
CLUSTER_K3S_IMAGE_TAG=latest
CLUSTER_VOLUME_HOST_PATH=${HOME}/${CLUSTER_NAME}
LB_HTTP_PORT=80
LB_HTTPS_PORT=443
READ_VALUE=
SERVERS=1
AGENTS=1

TRAEFIK_V2=No
INSTALL_LOCAL_REGISTRY=Yes
INSTALL_INGRESS=Yes
INSTALL_DASHBOARD=No
INSTALL_PROMETHEUS=No


LOCAL_REGISTRY_HOST="0.0.0.0"
LOCAL_REGISTRY_NAME="registry.${CLUSTER_DOMAIN}"
LOCAL_REGISTRY_PORT=5000
LOCAL_REGISTRY_MANIFEST=""
LOCAL_REGISTRY_VOL_HOSTPATH=${HOME}/${CLUSTER_NAME}-registry

# Text Variables
BOLD_TXT=$(tput bold)
NORMAL_TXT=$(tput sgr0)
YES_NO="(${BOLD_TXT}Y${NORMAL_TXT}es/${BOLD_TXT}N${NORMAL_TXT}o)"


function isSelected()
{
  if [ "${1}" = "Yes" ] || [ "${1}" = "yes" ] || [ "${1}" = "Y" ]  || [ "${1}" = "y" ];
  then
    echo 1
  else
    echo 0
  fi
}


# $1 text to show - $2 default value
function read_value()
{
    read -p "${1} [${BOLD_TXT}${2}${NORMAL_TXT}]: " READ_VALUE
    if [ "${READ_VALUE}" = "" ]
    then
        READ_VALUE=$2
    fi
}

function header()
{
    echo
    echo "==> ${BOLD_TXT}${1}${NORMAL_TXT}"
    echo
    # echo "-------------------------------------"
}

function footer()
{
    # echo
    # echo "-------------------------------------"
    echo
}


# Check if exist docker, k3d and kubectl
function checkDependencies()
{
    # Check Docker
    if ! type docker > /dev/null; then
        echo "Docker could not be found. Installing it ..."
        curl -L -o ./install-docker.sh "https://get.docker.com"
        chmod +x ./install-docker.sh
        ./install-docker.sh
        sudo usermod -aG docker $USER
        #exit
    fi

    # Check K3D
    if ! type k3d > /dev/null; then
        echo "K3D could not be found. Installing it ..."
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        # Install k3d autocompletion for bash
        echo "source <(k3d completion bash)" >> ~/.bashrc
        #exit
    fi

    # Check Kubectl
    if ! type kubectl > /dev/null; then
        echo "Kubectl could not be found. Installing it ..."
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client --output yaml
        #exit
    fi

    # Check Helm
    if ! type helm > /dev/null; then
        echo "Helm could not be found. Installing it ..."
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod +x ./get_helm.sh
        ./get_helm.sh

        # Add default repos
        helm repo add stable https://charts.helm.sh/stable
        # Add kubernetes-dashboard repository
        helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
        # Add bitnami helm repos
        helm repo add bitnami https://charts.bitnami.com/bitnami
        # Add Prometheus helm repos
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        # Update helm
        helm repo update
        #exit
    fi
}

function configValues()
{
  read_value "Cluster Name" "${CLUSTER_NAME}"
  CLUSTER_NAME=${READ_VALUE}

  read_value "Cluster K3s Image Tag" "${CLUSTER_K3S_IMAGE_TAG}"
  CLUSTER_K3S_IMAGE_TAG=${READ_VALUE}

  read_value "Cluster Domain" "${CLUSTER_DOMAIN}"
  CLUSTER_DOMAIN=${READ_VALUE}

  read_value "API Port" "${CLUSTER_API_PORT}"
  CLUSTER_API_PORT=${READ_VALUE}

  read_value "Servers (Masters)" "${SERVERS}"
  SERVERS=${READ_VALUE}

  read_value "Agents (Workers)" "${AGENTS}"
  AGENTS=${READ_VALUE}

  read_value "LoadBalancer HTTP Port" "${LB_HTTP_PORT}"
  LB_HTTP_PORT=${READ_VALUE}

  read_value "LoadBalancer HTTPS Port" "${LB_HTTPS_PORT}"
  LB_HTTPS_PORT=${READ_VALUE}

  read_value "Host path to mount into cluster" "${CLUSTER_VOLUME_HOST_PATH}"
  CLUSTER_VOLUME_HOST_PATH=${READ_VALUE}

  read_value "Install local image registry? ${YES_NO}" ${INSTALL_LOCAL_REGISTRY}
  INSTALL_LOCAL_REGISTRY=${READ_VALUE}
  if [ $(isSelected ${READ_VALUE}) -eq 1 ];
  then
    generateClusterRegistryManifest
  fi
}

function generateClusterRegistryManifest()
{
  read_value "Local registry name" "${LOCAL_REGISTRY_NAME}"
  LOCAL_REGISTRY_NAME=${READ_VALUE}

  read_value "Local registry host" "${LOCAL_REGISTRY_HOST}"
  LOCAL_REGISTRY_HOST=${READ_VALUE}

  read_value "Host path to for local registry" "${LOCAL_REGISTRY_VOL_HOSTPATH}"
  LOCAL_REGISTRY_VOL_HOSTPATH=${READ_VALUE}

  LOCAL_REGISTRY_MANIFEST="
registries:
  create:
    name: ${LOCAL_REGISTRY_NAME}
    host: \"${LOCAL_REGISTRY_HOST}\"
    hostPort: \"${LOCAL_REGISTRY_PORT}\"
    volumes:
      - ${LOCAL_REGISTRY_VOL_HOSTPATH}:/var/lib/registry"
}


function generateClusterManifest()
{
  header "Generate K3D cluster definition file"
  # For more check: https://github.com/rancher/k3d/blob/main/tests/assets/config_test_simple.yaml
cat > ./k3d-${CLUSTER_NAME}.tmp.yaml <<EOF
apiVersion: k3d.io/v1alpha4
kind: Simple
metadata:
  name: ${CLUSTER_NAME}
servers: ${SERVERS}
agents: ${AGENTS}
kubeAPI:
  hostIP: 0.0.0.0
  hostPort: "${CLUSTER_API_PORT}"
image: rancher/k3s:${CLUSTER_K3S_IMAGE_TAG}
volumes:
  - volume: ${CLUSTER_VOLUME_HOST_PATH}:/mnt/${CLUSTER_NAME}
    nodeFilters:
      - all
ports:
  - port: 0.0.0.0:${LB_HTTPS_PORT}:443
    nodeFilters:
      - loadbalancer
  - port: 0.0.0.0:${LB_HTTP_PORT}:80
    nodeFilters:
      - loadbalancer
options:
  k3d:
    wait: true
    timeout: 30s
    disableLoadbalancer: false
    disableImageVolume: false
    disableRollback: false
  k3s:
    extraArgs:
      - arg: "--tls-san=*.devship.localhost"
        nodeFilters:
          - server:*
      - arg: "--tls-san=127.0.0.1"
        nodeFilters:
          - server:*
      - arg: "--disable=traefik" # disable traefik
        nodeFilters:
          - server:*
    nodeLabels:
      - label: "CreatedBy=Rony"
        nodeFilters:
          - server:*
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
  runtime: # runtime (docker) specific options
    gpuRequest: ""
    serversMemory: ""
    agentsMemory: ""
    labels:
      - label: CreatedBy=Rony
        nodeFilters:
          - server:*
          - agent:*
          - loadbalancer
$LOCAL_REGISTRY_MANIFEST
EOF
cat <<EOF
Please check ${BOLD_TXT}./k3d-${CLUSTER_NAME}.tmp.yaml${NORMAL_TXT} for customizing your cluster.
For more please check https://github.com/rancher/k3d/blob/main/tests/assets/config_test_simple.yaml

==> ${BOLD_TXT}It will delete any existing cluster named k3d-${CLUSTER_NAME}${NORMAL_TXT} <==

EOF
read -n 1 -srp "Press any key to continue... "
footer

}

function buildCluster()
{
  header "Deleting Previous Cluster"
  k3d cluster delete ${CLUSTER_NAME}
  footer

  header "Building ${CLUSTER_NAME}"
  k3d cluster create --config k3d-${CLUSTER_NAME}.tmp.yaml
  footer

  header "Waiting for cluster init"
  sleep 5

  provisionPersistentVolume

}

function provisionPersistentVolume()
{
   # todo
}

checkDependencies

configValues

generateClusterManifest

buildCluster
