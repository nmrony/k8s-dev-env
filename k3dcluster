#!/usr/bin/env bash

#------------------------------------
#    Variables with default value
#------------------------------------
CLUSTER_NAME=devship
CLUSTER_DOMAIN=devship.localhost
CLUSTER_API_PORT=6443
LB_HTTP_PORT=80
LB_HTTPS_PORT=443
READ_VALUE=
SERVERS=1
AGENTS=1
TRAEFIK_V2=Yes
INSTALL_INGRESS=Yes
INSTALL_DASHBOARD=No
INSTALL_PROMETHEUS=No

# Text Variables
BOLD_TXT=$(tput bold)
NORMAL_TXT=$(tput sgr0)
YES_NO="(${BOLD_TXT}Y${NORMAL_TXT}es/${BOLD_TXT}N${NORMAL_TXT}o)"

# $1 text to show - $2 default value
function read_value()
{
    read -p "${1} [${BOLD_TXT}${2}${NORMAL_TXT}]: " READ_VALUE
    if [ "${READ_VALUE}" = "" ]
    then
        READ_VALUE=$2
    fi
}

function header()
{
    echo "\n\n${BOLD_TXT}${1}${NORMAL_TXT}\n-------------------------------------"
}

function footer()
{
    echo "-------------------------------------"
}


# Check if exist docker, k3d and kubectl
function checkDependencies()
{
    # Check Docker
    if ! type docker > /dev/null; then
        echo "Docker could not be found. Installing it ..."
        curl -L -o ./install-docker.sh "https://get.docker.com"
        chmod +x ./install-docker.sh
        ./install-docker.sh
        sudo usermod -aG docker $USER
        #exit
    fi

    # Check K3D
    if ! type k3d > /dev/null; then
        echo "K3D could not be found. Installing it ..."
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        # Install k3d autocompletion for bash
        echo "source <(k3d completion bash)" >> ~/.bashrc
        #exit
    fi

    # Check Kubectl
    if ! type kubectl > /dev/null; then
        echo "Kubectl could not be found. Installing it ..."
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client --output yaml
        #exit
    fi

    # Check Helm
    if ! type helm > /dev/null; then
        echo "Helm could not be found. Installing it ..."
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod +x ./get_helm.sh
        ./get_helm.sh

        # Add default repos
        helm repo add stable https://charts.helm.sh/stable
        # Add kubernetes-dashboard repository
        helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
        # Add bitnami helm repos
        helm repo add bitnami https://charts.bitnami.com/bitnami
        # Add Prometheus helm repos
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        # Update helm
        helm repo update
        #exit
    fi
}

function configValues()
{
  read_value "Cluster Name" "${CLUSTER_NAME}"
  CLUSTER_NAME=${READ_VALUE}
  read_value "Cluster Domain" "${CLUSTER_DOMAIN}"
  CLUSTER_DOMAIN=${READ_VALUE}
  read_value "API Port" "${API_PORT}"
  API_PORT=${READ_VALUE}
  read_value "Servers (Masters)" "${SERVERS}"
  SERVERS=${READ_VALUE}
  read_value "Agents (Workers)" "${AGENTS}"
  AGENTS=${READ_VALUE}
  read_value "LoadBalancer HTTP Port" "${LB_HTTP_PORT}"
  LB_HTTP_PORT=${READ_VALUE}
  read_value "LoadBalancer HTTPS Port" "${LB_HTTPS_PORT}"
  LB_HTTPS_PORT=${READ_VALUE}
}


function installCluster()
{
  header "Deleting Previous Cluster"
  # k3d cluster delete ${CLUSTER_NAME}
  footer
}
